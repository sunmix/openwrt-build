#!/bin/bash

OW_VERSION="21.02.1"
OW_PROFILE="xiaomi_mi-router-3g"
OW_TARGET="ramips"
OW_SUBTARGET="mt7621"
OW_CPU_ARCH=mipsel
OW_CPU_TYPE=24kc
OW_CPU_SUBTYPE=
OW_MIRROR="https://downloads.openwrt.org"
OW_REPOS_EXT=()
OW_PKG_EXT=()

OW_CC="gcc-8.4.0"
OW_DIR="$( cd `dirname "${BASH_SOURCE[0]}"` && pwd )"
OW_SPECS_DIR="${OW_DIR}/specs"
OW_BUILD_DIR="${OW_DIR}/build"
OW_SRC_DIR="${OW_BUILD_DIR}/_src_"

# Utilities
function print_usage() {
  echo -e "Usage:\n    $(basename "${BASH_SOURCE[0]}") <spec>"
  echo "Note: <spec> SHOULD be defined in specs folder."
  [ -d ${OW_SPECS_DIR} ] && echo "Current specs := $(cd "${OW_SPECS_DIR}"; echo *)"
}

# Start point
[ $# -eq '0' ] && { print_usage; exit 1; }
OW_SPEC=$1
OW_SPEC_FILE="${OW_SPECS_DIR}/${OW_SPEC}"
OW_SPEC_BUILD_DIR="${OW_BUILD_DIR}/${OW_SPEC}"
echo "Load ${OW_SPEC_FILE} ..."
source ${OW_SPEC_FILE} || { print_usage; exit 1; }

OW_IMG_DIR="${OW_BUILD_DIR}/_images_/${OW_SPEC}/"
OW_TARGET_URL="${OW_MIRROR}/releases/${OW_VERSION}/targets/${OW_TARGET}/${OW_SUBTARGET}"
OW_PKG_URL="${OW_MIRROR}/releases/${OW_VERSION}/packages/${OW_CPU_ARCH}_${OW_CPU_TYPE}${OW_CPU_SUBTYPE:+"_${OW_CPU_SUBTYPE}"}"
OW_SDK="openwrt-sdk-${OW_VERSION}-${OW_TARGET}-${OW_SUBTARGET}_${OW_CC}_musl.Linux-x86_64"
OW_SDK_DIR="${OW_BUILD_DIR}/${OW_SDK}"
OW_SDK_TAR="${OW_SDK}.tar.xz"
OW_SDK_URL="${OW_TARGET_URL}/${OW_SDK_TAR}"
OW_IB="openwrt-imagebuilder-${OW_VERSION}-${OW_TARGET}-${OW_SUBTARGET}.Linux-x86_64"
OW_IB_DIR="${OW_BUILD_DIR}/${OW_IB}"
OW_IB_TAR="${OW_IB}.tar.xz"
OW_IB_URL="${OW_TARGET_URL}/${OW_IB_TAR}"

mkdir -p "${OW_BUILD_DIR}"

cd "${OW_BUILD_DIR}"
OK_FILE=${OW_SDK_TAR}.ok
[ -f ${OK_FILE} ] || {
	curl -# -O ${OW_SDK_URL} || {
		rm -f ${OK_FILE}
		exit 1
	}
	touch ${OK_FILE}
}
OK_FILE=${OW_SDK}.ok
[ -f ${OK_FILE} ] || {
	rm -rf ${OW_SDK}
	tar xJf ${OW_SDK_TAR} || exit 1
	touch ${OK_FILE}
}
cd ${OW_SDK_DIR}
rm -rf dl && mkdir -p "${OW_SRC_DIR}" && ln -s "${OW_SRC_DIR}" dl
cp feeds.conf.default feeds.conf
echo "src-git my https://github.com/honwen/openwrt-v2ray-plugin.git" >> feeds.conf
./scripts/feeds update -a || exit 1
#./scripts/feeds install -p my shadowsocks-libev || exit 1
./scripts/feeds install -p my v2ray-plugin || exit 1
cat << 'EOF' > .config
CONFIG_CCACHE=y
# CONFIG_SIGNED_PACKAGES is not set
EOF
make defconfig || exit 1
#make -j8 package/shadowsocks-libev/compile || exit 1
make -j8 package/v2ray-plugin/compile || exit 1
make package/index
OW_REPOS_EXT+=("src my file://${OW_SDK_DIR}/bin/packages/${OW_CPU_ARCH}_${OW_CPU_TYPE}${OW_CPU_SUBTYPE:+"_${OW_CPU_SUBTYPE}"}/my")

cd "${OW_BUILD_DIR}"
rm -rf ${OW_IB} ${OW_SPEC}
[ -f ${OW_IB_TAR}.ok ] || {
	curl -# -O ${OW_IB_URL} || {
		rm -f ${OW_IB_TAR}.ok
		exit 1
	}
	touch ${OW_IB_TAR}.ok
}
tar xJf ${OW_IB_TAR} || exit 1
mv ${OW_IB} ${OW_SPEC}

cd ${OW_SPEC_BUILD_DIR}

# Clean up
rm -rf dl
# repositories.conf
echo "Generate repositories.conf ..."
[ -f repositories.conf.orig ] || mv repositories.conf repositories.conf.orig
echo "src/gz openwrt_core ${OW_TARGET_URL}/packages" > repositories.conf
for repo in "base" "luci" "packages" "routing" "telephony"; do
  echo "src/gz openwrt_${repo} ${OW_PKG_URL}/${repo}" >> repositories.conf
done
#echo "src imagebuilder file:packages" >> repositories.conf
for repo in "${OW_REPOS_EXT[@]}"; do
  echo ${repo} >> repositories.conf
done

# FILES
echo "Copy files ..."
mkdir -p files
for x in "${FILES[@]}"; do
  cp -f -R -v "${OW_DIR}/files/$x"/* files/
done

# PACKAGES
source "${OW_DIR}/package_group"
OW_PKGS=""
for pkg_grp in "${OW_PKG_GROUP[@]}"; do
	pkg_grp=OW_PKG_GROUP_${pkg_grp}
	OW_PKGS="${OW_PKGS} "`echo ${!pkg_grp}`
done
OW_PKGS="${OW_PKGS} "`echo ${OW_PKG_EXT}`

# make image
echo "Generate images ..."
eval make image \
     ${FILES:+"FILES=files"} \
     ${OW_PROFILE:+"PROFILE=${OW_PROFILE}"} \
     ${OW_PKGS:+"PACKAGES=\"${OW_PKGS}\""}

# copy images
rm -rf "${OW_IMG_DIR}" && mkdir -p "${OW_IMG_DIR}"
cp "${OW_SPEC_BUILD_DIR}/bin/targets/${OW_TARGET}/${OW_SUBTARGET}"/* "${OW_IMG_DIR}"/

